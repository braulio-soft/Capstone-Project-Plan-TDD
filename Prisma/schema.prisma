generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

CREATE TABLE Users (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone_number VARCHAR(20),
    age INT,
    cart_id INT,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP,
    deleted_date TIMESTAMP,
    FOREIGN KEY (cart_id) REFERENCES Cart(id)
);


CREATE TABLE Products (
    id SERIAL PRIMARY KEY,
    plan_id INT,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) CHECK (type IN ('Movie', 'Streaming Service')),
    category VARCHAR(100),
    price DECIMAL(10, 2),
    payment_date DATE,
    rating DECIMAL(2,1),
    release_date DATE,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP,
    deleted_date TIMESTAMP,
    FOREIGN KEY (plan_id) REFERENCES Plans(id)
);


CREATE TABLE Plans (
    id SERIAL PRIMARY KEY,
    type VARCHAR(50) CHECK (type IN ('Standard', 'Lvl 1', 'Lvl 2')),
    plan_term VARCHAR(100),
    product_id INT,
    price DECIMAL(10, 2),
    description TEXT,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP,
    deleted_date TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES Products(id)
);


CREATE TABLE Cart (
    id SERIAL PRIMARY KEY,
    user_id INT,
    payment_id INT,
    total_amount DECIMAL(10, 2),
    taxes DECIMAL(10, 2),
    shipping DECIMAL(10, 2),
    discount_code VARCHAR(100),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP,
    deleted_date TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (payment_id) REFERENCES Payments(id)
);

CREATE TABLE Items (
    id SERIAL PRIMARY KEY,
    cart_id INT,
    product_id INT,
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP,
    deleted_date TIMESTAMP,
    FOREIGN KEY (cart_id) REFERENCES Cart(id),
    FOREIGN KEY (product_id) REFERENCES Products(id)
);

CREATE TABLE Payments (
    id SERIAL PRIMARY KEY,
    placeholder_name VARCHAR(100),
    type VARCHAR(50) CHECK (type IN ('VISA', 'MASTERCARD', 'AMEX', 'OTHER')),
    quantity INT,
    cvc VARCHAR(10),
    card_number VARCHAR(20),
    expiration_date DATE,
    payment_plan VARCHAR(100)
);


//Relationships Summary:
Users ↔ Cart (1-to-1 or 1-to-many if extended)

Cart ↔ Items (1-to-many)

Cart ↔ Payments (1-to-1)

Items ↔ Products (many-to-1)

Products ↔ Plans (many-to-1)

Plans ↔ Products